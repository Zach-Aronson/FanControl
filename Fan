import time
import board
import busio
import digitalio
import adafruit_max31865
import pigpio
import gpiod
import threading
import csv
from datetime import datetime
import os
#Servo
from gpiozero import Servo, Button
from gpiozero.pins.pigpio import PiGPIOFactory
from signal import pause
from time import sleep


# === CONFIGURATION ===
FAN_PWM_GPIO = 18       # GPIO18 (Pin 12)
FAN_RPM_GPIO = 17       # GPIO17 (Pin 11)
CS_GPIO = 5             # GPIO5 (Pin 29) for MAX31865
LOG_DIR = "/home/Zach/FanControl/logs"
PWM_FREQ = 25000        # 25kHz PWM
SET_POINT_F = 110.0     # Fan ramp threshold (adjust as needed)

# === SPI + MAX31865 Setup ===
spi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)
cs = digitalio.DigitalInOut(board.D5)  # GPIO5 as CS
sensor = adafruit_max31865.MAX31865(spi, cs, wires=3)

# === PWM Setup ===
pi = pigpio.pi()
if not pi.connected:
    raise RuntimeError("Could not connect to pigpio daemon")

def set_fan_duty(duty):
    duty = max(0, min(100, duty))
    pi.hardware_PWM(FAN_PWM_GPIO, PWM_FREQ, int(1_000_000 * duty / 100))

# === RPM Input Setup ===
rpm_count = 0
lock = threading.Lock()

def rpm_event_callback(line, event_type):
    global rpm_count
    with lock:
        rpm_count += 1

def setup_rpm_gpio():
    """Attempts to request the GPIO line, retries cleanly if busy."""
    try:
        chip = gpiod.Chip("gpiochip0")
        line = chip.get_line(FAN_RPM_GPIO)
        line.request(consumer="RPM", type=gpiod.LINE_REQ_EV_FALLING_EDGE)
        return line
    except OSError as e:
        if e.errno == 16:
            print("GPIO line busy — retrying with chip reset...")
            time.sleep(0.5)
            chip.close()
            time.sleep(0.5)
            chip = gpiod.Chip("gpiochip0")
            line = chip.get_line(FAN_RPM_GPIO)
            line.request(consumer="RPM", type=gpiod.LINE_REQ_EV_FALLING_EDGE)
            return line
        else:
            raise

# === Logging Helpers ===
def get_log_file_path():
    today = datetime.now().strftime("%Y-%m-%d")
    return f"{LOG_DIR}/log_{today}.csv"

def ensure_log_header(log_path):
    if not os.path.exists(log_path):
        with open(log_path, "w", newline="") as f:
            writer = csv.writer(f)
            writer.writerow(["Timestamp", "Temp_F", "Fan_Duty", "Fan_RPM"])

# === MAIN LOOP ===
try:
    os.makedirs(LOG_DIR, exist_ok=True)
    print("Fan Control System: MAX31865 + RPM + Logging (Offline Ready)")

    rpm_line = setup_rpm_gpio()

    while True:
        log_path = get_log_file_path()
        ensure_log_header(log_path)

        try:
            temp_c = sensor.temperature
            temp_f = temp_c * 9 / 5 + 32
        except Exception as e:
            print(f"Sensor error: {e}")
            temp_f = -459.67

        print(f"Temperature: {temp_f:.2f} F")

        # Basic proportional control logic
        duty = max(0, min(100, (temp_f - 100) * 100 / 30))
        set_fan_duty(duty)

        # RPM measurement loop (2 seconds)
        start_time = time.time()
        with lock:
            rpm_count = 0
        while time.time() - start_time < 2:
            if rpm_line.event_wait(sec=1):
                event = rpm_line.event_read()
                rpm_event_callback(rpm_line, event.event_type)

        with lock:
            count = rpm_count
        rpm = (count / 2.0) * 30
        print(f"Fan RPM: {rpm:.0f}, Fan Duty: {duty:.0f}%\n")

        # Log data
        with open(log_path, "a", newline="") as f:
            writer = csv.writer(f)
            writer.writerow([
                datetime.now().isoformat(),
                round(temp_f, 2),
                round(duty, 2),
                round(rpm, 2)
            ])
#Servo
# Setup for precise PWM and input reading
factory = PiGPIOFactory()
servo = Servo(24, min_pulse_width=0.0007, max_pulse_width=0.0023, pin_factory=factory)
switch = Button(23, pull_up=False)  # Pull-down logic

# Track servo angle (for logging)
current_angle = None

# Instantly moves servo to target angle
def set_angle(degrees):
    global current_angle
    degrees = max(0, min(180, degrees))  # Clamp to valid range
    value = (degrees - 90) / 90          # Convert degrees to -1 to 1
    servo.value = value
    current_angle = degrees
    print(f"Servo moved instantly to {degrees}°")

# Actions based on toggle switch state
def to_switch():
    set_angle(40)

def to_base_position():
    set_angle(120)

# Set up event triggers
switch.when_pressed = to_switch
switch.when_released = to_base_position

# Initialize servo position
set_angle(80)

pause()  # Keep the program alive

except KeyboardInterrupt:
    print("Shutting down.")
finally:
    set_fan_duty(0)
    pi.hardware_PWM(FAN_PWM_GPIO, 0, 0)
    pi.stop()
